// ここでは、DBと会話ができるクラスを作成していく。
package testdb;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TestUserDAO {
	
	public void select(String name, String password) {
		// DBへの接続の準備。DBと会話するためのコードと思って覚える。
		// これでmysqlにログイン出来ました。
		DBConnector db = new DBConnector();
		Connection con = db.getConnection();
		
		// test_tableに入っているデータuser_name=? password=?に入る2つの条件を満たしたデータがsqlに代入される。
		// _はプレースホルダと言ってその都度違うデータを入れていきたい時に使用する。
		// 例えば、user_name="taro" and password="123"とした場合は太郎と123しかデータを抽出することが出来ない。
		String sql = "select*from test_table where user_name = ? and password = ?";
		try {
			
			// PreparedStatementとはDBまで運んでくれる箱です。
			// executeQuery();は実行メソッドで、必ずResultSetが返ってくる。覚えとく！
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1,  name);
			ps.setString(2,  password);
			ResultSet rs = ps.executeQuery();
			
			// ここでは２つのことをしている。
			// １）カーソルを下に1行ずつずらすこと。
			// ２）データが存在していれば戻り値をtrueで返す。存在しなければfalseで返す。
			if(rs.next()) {
				System.out.println(rs.getString("user_name"));
				System.out.println(rs.getString("password"));
			}
		} catch(SQLException e) {
			e.printStackTrace();
		}
		try {
			// データベースとの接続を終了させるという意味。
			// これをしないとデータベースに接続されたまま次の作業が実行され、メモリに負荷がかかる。
			// 終わりには必ず終了をするように！
			con.close();
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}



// DAOの流れについては基本的に決まっています。
// DAOはDBConnectorからインスタンス化をして、getConnectionを呼び出して、mysqlにログインします。
// その後はSQL文を書いてPreparedStatementの中にデータを入れてexecuteUpdateもしくはexecuteQueryで実行。
// そしてcon.closeをして接続を切ります。
// この先もほぼ構文は一緒なのでまずは全体の流れを把握しましょう！

public void selectAll() {
	DBConnector db = new DBConnector();
	Connection con = db.getConnection();
	
	String sql ="select*from test_table";
	try {
		PreparedStatement ps = con.prepareStatement(sql);
		ResultSet rs=ps.executeQuery();
		// while(rs.next())とはカーソルを一行ずつ実行していき、データがなくなったら実行を終了という意味
		while(rs.next()) {
			System.out.println(rs.getString("user_name"));
			System.out.println(rs.getString("password"));
		}
	} catch(SQLException e) {
		e.printStackTrace();
	}
	try {
		con.close();
	} catch (SQLException e) {
		e.printStackTrace();
	}

}
public void selectByName(String name) {
	DBConnector db = new DBConnector();
	Connection con = db.getConnection();
	
	// 変更前は　String sql ="select*from test_table";
	String sql ="select * from test_table where user_name=?";
	try {
		PreparedStatement ps = con.prepareStatement(sql);
		ps.setString(1, name);
		ResultSet rs=ps.executeQuery();
		
		// while(rs.next())とはカーソルを一行ずつ実行していき、データがなくなったら実行を終了という意味
		while(rs.next()) {
			System.out.println(rs.getString("user_name"));
			System.out.println(rs.getString("password"));
		}
	} catch(SQLException e) {
		e.printStackTrace();
	}
	try {
		con.close();
	} catch (SQLException e) {
		e.printStackTrace();
	}
}

public void selectByPassword(String password) {
	DBConnector db = new DBConnector();
	Connection con = db.getConnection();
	
	String sql = "select * from test_table where password=?";
	try {
		PreparedStatement ps = con.prepareStatement(sql);
		ps.setString(1,  password);
		ResultSet rs=ps.executeQuery();
		while(rs.next()) {
			System.out.println(rs.getString("user_name"));
			System.out.println(rs.getString("password"));
		}
	} catch(SQLException e) {
		e.printStackTrace();
	}
	try {
		con.close();
	} catch(SQLException e) {
		e.printStackTrace();
	}
}


public void updateUserNameByUserName(String oldName, String newName) {
	DBConnector db = new DBConnector();
	Connection con = db.getConnection();
	
	String sql = "update test_table set user_name=? where user_name=?";
	try {
		PreparedStatement ps = con.prepareStatement(1, newName);
		ps.setString(2, oldName);
		int i=ps.executeUpdate();
		if(i>0) {
			System.out.println(+ "件更新されました");
		} else {
			System.out.println("該当するデータはありませんでした");
		}
	} catch(SQLException e) {
			e.printStackTrace();
		}
		try {
			con.close();
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}
}

}


}
